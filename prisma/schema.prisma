datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // For credential-based authentication
  role          String    @default("USER")

  // Two-Factor Authentication
  twoFactorEnabled     Boolean? @default(false)
  twoFactorSecret      String? // TOTP secret (encrypted)
  twoFactorBackupCodes String? // JSON array of hashed backup codes

  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  accounts                 Account[]
  sessions                 Session[]
  providerConfigs          ProviderConfig[]
  conversations            Conversation[]
  messages                 Message[]
  teamMemberships          TeamMembership[]         @relation("UserTeamMembership")
  auditLogs                AuditLog[]
  goals                    Goal[]
  personas                 Persona[]
  ownedTeams               Team[]                   @relation("TeamOwner")
  sharedConversations      SharedConversation[]     @relation("SharedConversationOwner")
  sharedConversationAccess SharedConversationUser[] @relation("SharedConversationAccess")
  sharedConversationShares SharedConversationUser[] @relation("SharedConversationSharedBy")
  deletionRecords          DeletionRecord[]
  complianceConfigs        ComplianceConfig[]
  userConsents             UserConsent[]

  @@index([email])
  @@index([createdAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ProviderConfig {
  id         String    @id @default(cuid())
  provider   String
  apiKey     String? // Encrypted API key stored server-side
  settings   String? // JSON object for additional provider settings
  isActive   Boolean   @default(true)
  lastUsedAt DateTime? // Track when API key was last used (added for lifecycle management)
  usageCount Int       @default(0) // Track API key usage (added for lifecycle management)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([lastUsedAt]) // Index for lifecycle queries
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  teamId    String?
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  team     Team?     @relation(fields: [teamId], references: [id], onDelete: SetNull)
  messages Message[]
}

model Message {
  id               String   @id @default(cuid())
  conversationId   String
  userId           String?
  role             String
  content          String
  promptTokens     Int?
  completionTokens Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([conversationId])
  @@index([userId])
}

model Team {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  ownerId             String
  owner               User                 @relation("TeamOwner", fields: [ownerId], references: [id])
  members             TeamMembership[]
  conversations       Conversation[]
  sharedConversations SharedConversation[]
  auditLogs           AuditLog[]

  @@index([ownerId, createdAt])
  @@index([createdAt])
}

model TeamMembership {
  id       String   @id @default(cuid())
  teamId   String
  userId   String
  role     String   @default("MEMBER")
  joinedAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation("UserTeamMembership", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([userId, role])
}

model AuditLog {
  id            String   @id @default(cuid())
  timestamp     DateTime @default(now())
  userId        String?
  teamId        String?
  action        String
  resource      String?
  resourceId    String?
  details       String? // Changed from Json to String for SQLite compatibility
  outcome       String?
  ipAddress     String?
  userAgent     String?
  correlationId String?
  severity      String?
  category      String?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  team Team? @relation(fields: [teamId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([teamId])
  @@index([timestamp])
}

model Analytics {
  id        String   @id @default(cuid())
  event     String
  payload   String?
  createdAt DateTime @default(now())
  userId    String

  @@index([userId, createdAt])
  @@index([event, createdAt])
  @@index([createdAt])
}

model Goal {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([status, createdAt])
  @@index([userId, createdAt])
}

model Persona {
  id          String   @id @default(cuid())
  title       String
  description String?
  prompt      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([createdAt])
}

model SharedConversation {
  id         String                   @id @default(cuid())
  title      String
  messages   String
  createdAt  DateTime                 @default(now())
  updatedAt  DateTime                 @updatedAt
  ownerId    String
  owner      User                     @relation("SharedConversationOwner", fields: [ownerId], references: [id])
  teamId     String?
  team       Team?                    @relation(fields: [teamId], references: [id], onDelete: SetNull)
  sharedWith SharedConversationUser[]
  isPublic   Boolean                  @default(false)
  canEdit    Boolean                  @default(false)

  @@index([ownerId, createdAt])
  @@index([teamId])
  @@index([isPublic])
}

model SharedConversationUser {
  id                   String             @id @default(cuid())
  sharedConversationId String
  userId               String
  canEdit              Boolean            @default(false)
  sharedAt             DateTime           @default(now())
  sharedBy             String
  conversation         SharedConversation @relation(fields: [sharedConversationId], references: [id], onDelete: Cascade)
  user                 User               @relation("SharedConversationAccess", fields: [userId], references: [id], onDelete: Cascade)
  sharedByUser         User               @relation("SharedConversationSharedBy", fields: [sharedBy], references: [id], onDelete: Restrict)

  @@unique([sharedConversationId, userId])
  @@index([userId])
  @@index([sharedBy])
}

model DeletionRecord {
  id              String    @id @default(cuid())
  userId          String
  status          String    @default("requested")
  deletionMethod  String    @default("hard")
  reason          String?
  deletionSummary String? // Using String to store JSON for compatibility
  startedAt       DateTime?
  completedAt     DateTime?
  error           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model ComplianceConfig {
  id                  String    @id @default(cuid())
  userId              String    @unique
  dataRetentionPeriod Int       @default(90)
  exportFormat        String    @default("json")
  notificationEmail   String?
  consentGivenAt      DateTime?
  consentWithdrawnAt  DateTime?
  lastExportedAt      DateTime?
  exportFrequency     String    @default("manual")
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([consentGivenAt])
  @@index([consentWithdrawnAt])
  @@index([createdAt])
}

model RetentionPolicy {
  id                   String   @id @default(cuid())
  name                 String
  description          String?
  retentionPeriodDays  Int      @default(90)
  appliesTo            String   // JSON array of table names or data categories
  isActive             Boolean  @default(true)
  lastRunAt            DateTime?
  nextRunAt            DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Add opposite relation to RetentionPolicyExecution
  executions           RetentionPolicyExecution[]

  @@index([isActive])
  @@index([nextRunAt])
}

model RetentionPolicyExecution {
  id              String   @id @default(cuid())
  policyId        String
  executedAt      DateTime @default(now())
  recordsDeleted  Int      @default(0)
  executionTimeMs Int      @default(0)
  status          String   @default("success")
  error           String?
  details         String?  // JSON object with execution details
  policy          RetentionPolicy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@index([policyId])
  @@index([executedAt])
  @@index([status])
}

model UserConsent {
  id              String    @id @default(cuid())
  userId          String
  category        String    // Consent category (e.g., "data_processing", "marketing", etc.)
  regulation      String?   // Compliance regulation (GDPR, CCPA, etc.)
  consentText     String    // The actual consent text agreed to
  version         String    // Version of the consent agreement
  status          String    @default("granted")  // granted, withdrawn, expired
  consentedAt     DateTime  @default(now())
  withdrawnAt     DateTime?
  ipAddress       String?
  userAgent       String?
  requiresRenewal Boolean   @default(false)
  renewalDate     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([category])
  @@index([status])
  @@index([consentedAt])
  @@index([withdrawnAt])
  @@index([requiresRenewal])
  @@index([renewalDate])
}
