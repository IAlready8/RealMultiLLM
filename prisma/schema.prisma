// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator db {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

// Use environment variable to switch between SQLite (development) and PostgreSQL (production)
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model (extended from NextAuth)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  goals         Goal[]
  personas      Persona[]
  analytics     Analytics[]
  settings      UserSettings?
  subscriptions Subscription[]
  apiKeys       ApiKey[]
  analyticsEvents AnalyticsEvent[]
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model Goal {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("pending") // "pending" or "completed"
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([title, userId])
}

model Persona {
  id          String   @id @default(cuid())
  title       String
  description String?
  prompt      String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([title, userId])
}

model Analytics {
  id        String   @id @default(cuid())
  event     String
  payload   String?
  userId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NEW: Persist per-user model settings to avoid server-side localStorage
model UserSettings {
  userId        String  @id
  modelSettings String // Changed from Json to String to support SQLite

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enhanced analytics event tracking
model AnalyticsEvent {
  id        String   @id @default(cuid())
  event     String
  payload   String   // JSON string for SQLite compatibility
  userId    String?
  timestamp DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([event])
  @@index([timestamp])
  @@index([userId])
}

// Subscription management
model Subscription {
  id        String   @id @default(cuid())
  userId    String
  tier      String   // 'free', 'pro', 'enterprise'
  status    String   // 'active', 'cancelled', 'expired', 'pending'
  startDate DateTime
  endDate   DateTime?
  metadata  String?  // JSON string for features and limits
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

// API key management
model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  hashedKey String   @unique
  name      String?
  isActive  Boolean  @default(true)
  lastUsed  DateTime?
  createdAt DateTime @default(now())
  expiresAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([hashedKey])
  @@index([userId])
}

// Security management
model BlockedIP {
  id        String   @id @default(cuid())
  ip        String   @unique
  reason    String?
  expiresAt DateTime?
  createdAt DateTime @default(now())

  @@index([ip])
  @@index([expiresAt])
}
