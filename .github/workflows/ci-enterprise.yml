name: Enterprise CI Pipeline

on:
  push:
    branches: [ main, develop, release/** ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Security scan job
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run dependency security audit
        run: npm audit --audit-level high

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Code quality checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npx eslint . --ext .ts,.tsx,.js,.jsx --max-warnings 0

      - name: Run Prettier check
        run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,md}"

      - name: Run TypeScript type checking
        run: npx tsc --noEmit

      - name: Validate configuration files
        run: |
          # Check that environment files have appropriate configurations
          ls -la .env* || echo "No .env files in repo (as expected)"
          
          # Validate package.json
          node -e "JSON.parse(require('fs').readFileSync('package.json')); console.log('Valid JSON: package.json')"

  # Unit tests with coverage
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:unit -- --coverage
        env:
          NODE_ENV: test
          JWT_SECRET: test-secret-change-in-production
          NEXTAUTH_SECRET: test-nextauth-secret

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: true
        continue-on-error: true

  # Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npx prisma generate
          npx prisma db push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          NODE_ENV: test
          JWT_SECRET: test-secret-change-in-production
          NEXTAUTH_SECRET: test-nextauth-secret
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

  # Enterprise feature tests
  enterprise-features:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Verify enterprise modules exist
        run: |
          if [ ! -f "lib/config/index.ts" ]; then
            echo "ERROR: Enterprise config module not found"
            exit 1
          fi
          
          if [ ! -f "lib/observability/telemetry.ts" ]; then
            echo "ERROR: Enterprise telemetry module not found"
            exit 1
          fi
          
          if [ ! -f "lib/security/hardening.ts" ]; then
            echo "ERROR: Enterprise security module not found"
            exit 1
          fi
          
          if [ ! -f "lib/performance/perf-toolkit.ts" ]; then
            echo "ERROR: Enterprise performance module not found"
            exit 1
          fi
          
          echo "All enterprise modules exist"

      - name: Test enterprise configuration validation
        run: |
          # Create a test script to validate config module
          cat > test-config.js << 'EOF'
          try {
            const { configManager } = require('./lib/config/index.ts');
            console.log('Config module loaded successfully');
            const config = configManager.getConfig();
            console.log('Config retrieved:', typeof config);
            console.log('Environment:', config.environment);
          } catch (e) {
            console.error('Config module error:', e.message);
            process.exit(1);
          }
EOF
          node test-config.js

      - name: Test enterprise security features
        run: |
          # Create a test to verify security module
          cat > test-security.js << 'EOF'
          try {
            const { securityManager } = require('./lib/security/hardening.ts');
            console.log('Security module loaded successfully');
            const stats = securityManager.getSecurityStats();
            console.log('Security stats retrieved:', typeof stats);
          } catch (e) {
            console.error('Security module error:', e.message);
            process.exit(1);
          }
EOF
          node test-security.js

      - name: Test enterprise performance features
        run: |
          # Create a test to verify performance module
          cat > test-performance.js << 'EOF'
          try {
            const { perfToolkit } = require('./lib/performance/perf-toolkit.ts');
            console.log('Performance module loaded successfully');
            
            // Test memoization
            const memoizedFn = perfToolkit.memoize((x) => x * 2, 'test-memo');
            const result = memoizedFn(5);
            console.log('Memoization test result:', result);
            
            // Test cache
            perfToolkit.setCache('test-key', 'test-value').then(success => {
              console.log('Cache set result:', success);
            });
            
            // Test profiling
            perfToolkit.profileExecution(() => {
              return 'test-result';
            }, { name: 'test-operation' }).then(({ result }) => {
              console.log('Profile execution result:', result);
            });
          } catch (e) {
            console.error('Performance module error:', e.message);
            process.exit(1);
          }
EOF
          node test-performance.js

  # Build and lint enterprise application
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_APP_ENV: ci
          DATABASE_URL: sqlite://ci.db
          NEXTAUTH_SECRET: ci-secret
          NEXTAUTH_URL: http://localhost:3000
          JWT_SECRET: ci-jwt-secret

      - name: Verify build output
        run: |
          if [ -d ".next" ]; then
            echo "Build output exists"
            ls -la .next/
          else
            echo "ERROR: Build output not found"
            exit 1
          fi

      - name: Run production build tests
        run: npm run start &
          sleep 10s  # Wait for server to start
          if ! curl -f http://localhost:3000/health; then
            echo "Health check failed"
            exit 1
          fi

  # Performance benchmarking
  performance-benchmarks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance benchmarks
        run: |
          # Create a simple benchmark test
          cat > benchmark-test.js << 'EOF'
          const { perfToolkit } = require('./lib/performance/perf-toolkit.ts');
          
          async function runBenchmarks() {
            console.log('Starting performance benchmarks...');
            
            // Test memoization performance
            const expensiveFn = (n) => {
              if (n <= 1) return n;
              return expensiveFn(n - 1) + expensiveFn(n - 2);
            };
            
            const memoizedExpensiveFn = perfToolkit.memoize(expensiveFn, 'fibonacci');
            
            console.time('Memoized Fibonacci(20)');
            const result1 = memoizedExpensiveFn(20);
            console.timeEnd('Memoized Fibonacci(20)');
            
            console.time('Memoized Fibonacci(20) - second call');
            const result2 = memoizedExpensiveFn(20);
            console.timeEnd('Memoized Fibonacci(20) - second call');
            
            // Test caching performance
            console.time('Cache set');
            await perfToolkit.setCache('benchmark-key', { data: 'test'.repeat(1000) });
            console.timeEnd('Cache set');
            
            console.time('Cache get');
            const cachedValue = await perfToolkit.getFromCache('benchmark-key');
            console.timeEnd('Cache get');
            
            console.log('Performance benchmarks completed');
          }
          
          runBenchmarks().catch(console.error);
EOF
          node benchmark-test.js

  # Deployment preparation
  prepare-deployment:
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, unit-tests, integration-tests, enterprise-features, build, performance-benchmarks]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create deployment package
        run: |
          # Create a deployment directory with necessary files only
          mkdir -p deployment
          cp -r package.json package-lock.json next.config.mjs tsconfig.json deployment/
          cp -r .next/ deployment/
          cp -r public/ deployment/
          cp -r lib/ deployment/
          
          # Create deployment info file
          echo "{
            \"commit\": \"${{ github.sha }}\",
            \"branch\": \"${{ github.ref }}\",
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"build\": \"${{ github.run_number }}\"
          }" > deployment/deployment-info.json
          
          # Create enterprise readiness report
          npx ts-node scripts/generate-enterprise-report.ts || echo "Enterprise report generation skipped"

      - name: Archive deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package
          path: deployment/
          retention-days: 30

  # Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [prepare-deployment]
    if: always()
    steps:
      - name: Check workflow status
        run: |
          if [[ ${{ needs.prepare-deployment.result }} == 'success' ]] || [[ ${{ needs.prepare-deployment.result }} == 'skipped' ]]; then
            echo "Workflow completed successfully"
          else
            echo "Workflow failed"
            exit 1
          fi